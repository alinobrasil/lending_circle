'use client';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useState, useEffect } from 'react';

import { useAccount, useContractRead, useNetwork } from 'wagmi';
import LendingCircleArtifact from './helpers/LendingCircle.json'
import NavBar from './components/NavBar';
import { Config } from './helpers/config';
import { Address } from 'wagmi'

import dynamic from 'next/dynamic';
import BasicTable from './components/BasicTable';

import { UseContractReadResult, ValidChains, CircleInfo } from './helpers/types'

import { ethers } from 'ethers';
import { createPublicClient, http } from 'viem';



const Home: NextPage = () => {
  // view all lending circles, split into active, pending & completed circles
  // admin gets option to create new circle
  // active participants get to see circles they're currently involved in

  const [circles, setCircles] = useState<any>([])
  const [circleCount, setCircleCount] = useState(0)
  const [currentChain, setCurrentChain] = useState('scrollSepolia' as ValidChains)
  const { chain, chains } = useNetwork();

  const client = createPublicClient({
    chain: chain,
    transport: http()
  })

  // Set currentChain and circleCount, whenever chain changes
  useEffect(() => {
    function isValidChain(chainName: string): chainName is ValidChains {
      return chainName === "scrollSepolia" || chainName === "mantleTestnet";
    }

    const getCircleCount = async (): Promise<number> => {
      try {
        const data: any = await client.readContract({
          address: Config[currentChain].contractAddress as Address,
          abi: Config[currentChain].abi,
          functionName: 'circleCount',
        })

        const result = parseInt(data.toString())
        console.log("viem got circle count: ", result)

        return result
      } catch (error) {
        console.error("There was an error fetching the data:", error);
        return 0
      }
    };

    if (chain && isValidChain(chain.network)) {

      setCurrentChain(chain.network);

      getCircleCount().then((result) => {
        setCircleCount(result)
      })
    }

  }, [chain])

  //user's address
  const { address } = useAccount();

  useEffect(() => {
    if (circleCount > 0) {
      viewCircles()
    }
  }, [circleCount])


  //display welcome message if user is not connected
  const welcomePage = () => {

    if (!address) {
      return (
        <>
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            Welcome to Unity Lending Circles
          </h1>

          <p>Get started by connecting your wallet </p>

          <ConnectButton />
        </>
      )
    }
  }

  const viewCircles = async () => {
    //get all circles
    let circle: CircleInfo;
    console.log("total# of circles: ", circleCount)

    let circleArray = []

    for (let i = 0; i < circleCount; i++) {
      const data: any = await client.readContract({
        address: Config[currentChain].contractAddress as Address,
        abi: Config[currentChain].abi,
        functionName: 'getCircleDetails',
        args: [i.toString()]
      })

      console.log(data)
      const id = parseInt(data[0].toString());
      const name = data[1]

      console.log("id: ", id)
      console.log("name: ", name)

      circleArray[i] = { id, name }

    }
    setCircles(circleArray)
  }

  return (
    <div >
      <Head>
        <title>Lending Circle - Ali Kim</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="Eth Global Online 2023"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <NavBar />

      <div className="body-area">
        {welcomePage()}



        <BasicTable />

      </div>

      <div className='text-center fixed bottom-0 w-full'>
        <a href="https://twitter.com/alik_im" rel="noopener noreferrer" target="_blank">
          Made with ❤️ by Ali Kim
        </a>
      </div>
    </div>
  );
};

export default dynamic(() => Promise.resolve(Home), { ssr: false })

